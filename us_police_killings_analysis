---
title: "US Police Killings"
runtime: shiny
output: html_document
---

```{r setup, include=FALSE}
if (!requireNamespace("rmarkdown", quietly = TRUE)) install.packages("rmarkdown")
if (!requireNamespace("RColorBrewer", quietly = TRUE)) install.packages("RColorBrewer")

library(rmarkdown)
library(plotly)
library(dplyr)
library(tidyr)
library(RColorBrewer)
library(shiny)
```
##### Raeesa Dhoda
<p></p>

### Introduction

This report surveys police killings in the US across the past decade. We filter our analyses according to several factors and demographics and draw conclusions accordingly.

The dataset was extracted from the following website: https://mappingpoliceviolence.us. It required some manipulation to parse objects cleanly, so I have uploaded the modified datasets as well.

The range of values inside each category required much condensation to ensure a coherent display along all x-axes. It would not be sensible to have 20 variants inside, say, our Race category. Therefore, to enhance comprehensibility and readability, we reduce the set size as much as possible to derive meaningful insights.

The raw dataset contained data until the present day. However, since 2024 is not a complete calendar year, it was requisite to exclude this value to assess the number of killings per annum fairly.

```{r load_data}
police_killings <- read.csv("/Users/raeesauser/Desktop/CS544_Foundations_of_Analytics/Police Killings.csv")

police_killings <- police_killings %>%
  filter(Year != 2024, State != "District of Columbia") %>%
  rename(Gender = Victim.s.Gender, Race = Victim.s.Race, Age = Victim.s.Age) %>%
  mutate(Age = suppressWarnings(as.numeric(Age))) %>%
  filter(!is.na(Age))

police_killings_per_annum <- count(police_killings, Year) %>% rename(Death_Toll = n)

police_killings_per_annum_gender <- count(police_killings, Year, Gender) %>% rename(Death_Toll = n)

police_killings_age_groups <- police_killings %>%
  mutate(Age_Group = cut(Age, breaks = c(0, 18, 30, 45, Inf), labels = c("0-18", "19-30", "31-45", "46+"))) %>%
  count(Year, Age_Group) %>%
  complete(Year, Age_Group, fill = list(n = 0))

police_killings_per_annum_race <- count(police_killings, Year, Race) %>% rename(Death_Toll = n)

police_killings_per_state_race <- count(police_killings, State, Race) %>% rename(Death_Toll = n)

police_killings_per_state <- count(police_killings, State) %>% rename(Death_Toll = n)

police_killings_armed_status <- count(police_killings, Armed.Status) %>% rename(Death_Toll = n)

police_killings_police_charges <- count(police_killings, Criminal.Charges) %>% rename(Death_Toll = n)

top_10_states <- police_killings_per_state[order(-police_killings_per_state$Death_Toll), ][1:10, ]

racial_stats <- read.csv("/Users/raeesauser/Desktop/CS544_Foundations_of_Analytics/US Racial Stats.csv")

racial_stats <- racial_stats %>%
  mutate(
    Total.Population = as.numeric(gsub(",", "", Total.Population)),
    Black.Population = as.numeric(gsub(",", "", Black.Population)),
    White.Population = as.numeric(gsub(",", "", White.Population)),
    Hispanic.Population = as.numeric(gsub(",", "", Hispanic.Population)),
    Native.American.Population = as.numeric(gsub(",", "", Native.American.Population)),
    Asian.Population = as.numeric(gsub(",", "", Asian.Population)),
    Pacific.Islander.Population = as.numeric(gsub(",", "", Pacific.Islander.Population))
  ) %>%
  mutate(
    Black = Black.Population / Total.Population * 100,
    White = White.Population / Total.Population * 100,
    Hispanic = Hispanic.Population / Total.Population * 100,
    Native_American = Native.American.Population / Total.Population * 100,
    Asian = Asian.Population / Total.Population * 100,
    Pacific_Islander = Pacific.Islander.Population / Total.Population * 100
  ) %>%
  select(State, Black, White, Hispanic, Native_American, Asian, Pacific_Islander) %>%
  filter(State != "District of Columbia")

police_killings_per_state_race %>%
  pivot_wider(names_from = Race, values_from = Death_Toll, values_fill = 0)

state_totals <- police_killings_per_state_race %>%
  group_by(State) %>% summarise(Total_Death_Toll = sum(Death_Toll))

percentages <- police_killings_per_state_race %>%
  left_join(state_totals, by = "State") %>%
  mutate(Death_Toll_Percent = (Death_Toll / Total_Death_Toll) * 100) %>%
  pivot_wider(names_from = Race, values_from = Death_Toll_Percent) %>%
  select(-c(Death_Toll, Total_Death_Toll))

percentages <- percentages %>%
  group_by(State) %>%
  summarise_all(list(~ sum(., na.rm = TRUE)))

percentages[is.na(percentages)] <- 0

percentages_transposed <- percentages %>%
  pivot_longer(cols = -State, names_to = "Race", values_to = "Percentage")

racial_stats_transposed <- racial_stats %>%
  pivot_longer(cols = -State, names_to = "Race", values_to = "Percentage")

set.seed(2867)
sample_size <- 20
sample_indices <- sample(nrow(police_killings_per_annum_race), sample_size, replace = FALSE)
random_sample_without_replacement <- police_killings_per_annum_race[sample_indices, ]

set.seed(2867)
sample_size <- 120
sample_indices <- sample(nrow(police_killings_per_annum_race), sample_size, replace = TRUE)
random_sample_with_replacement <- police_killings_per_annum_race[sample_indices, ]

set.seed(2867)
strata <- unique(police_killings_per_annum_race$Race)
sample_size_per_stratum <- 5
stratified_sample <- data.frame()
for (s in strata) {
  stratum_data <- police_killings_per_annum_race[police_killings_per_annum_race$Race == s, ]
  if (nrow(stratum_data) > sample_size_per_stratum) {
    sample_indices <- sample(nrow(stratum_data), sample_size_per_stratum, replace = FALSE)
    stratum_sample <- stratum_data[sample_indices, ]
  } else {
    stratum_sample <- stratum_data
  }
  stratified_sample <- rbind(stratified_sample, stratum_sample)
}
```

```{r plot1}
plotly::plot_ly(police_killings_per_annum, x = ~Year, y = ~Death_Toll, type = "bar") %>%
  plotly::layout(
    title = 'Police Killings per Annum',
    xaxis = list(title = 'Year'),
    yaxis = list(title = 'Death Toll', range = c(1000, max(police_killings_per_annum$Death_Toll) * 1.1)),
    barmode = 'stack',
    bargap = 0.1,
    font = list(color = 'black', family = 'Arial'),
    margin = list(l = 50, r = 50, b = 80, t = 80),
    showlegend = FALSE
  )
```

We reduced the scale of the y-axis to start from 1000 instead of 0, allowing us to better understand the year-on-year variance. This adjustment revealed an upward trend in the count of police killings, with nearly 100 more incidents in 2023 compared to ten years prior.

```{r plot2}
plotly::plot_ly(police_killings_per_annum_gender, x = ~Year, y = ~Death_Toll, color = ~Gender, type = "bar") %>%
  plotly::layout(
    title = 'Police Killings per Annum by Gender',
    xaxis = list(title = 'Year', tickmode = "linear"),
    yaxis = list(title = 'Death Toll'),
    barmode = 'stack',
    bargap = 0.1,
    font = list(color = 'black', family = 'Arial'),
    margin = list(l = 50, r = 50, b = 80, t = 80),
    showlegend = TRUE
  )
```

Another clear insight we can draw is that a more significant proportion of killings were to men than to females or other gender classifications. This measure hardly wavered over the span of ten years, and we can understand that men are far more vulnerable to homicide by police than anyone else.

```{r plot3}
plotly::plot_ly(police_killings_age_groups, x = ~Year, y = ~n, color = ~Age_Group, type = "bar") %>%
  plotly::layout(
    title = 'Police Killings per Annum by Age Group',
    xaxis = list(title = 'Year', tickmode = "linear"),
    yaxis = list(title = 'Death Toll'),
    font = list(color = 'black', family = 'Arial'),
    margin = list(l = 50, r = 50, b = 80, t = 80),
    barmode = 'stack',
    showlegend = TRUE
  )
```

Categorising ages into broader groups rather than discrete values was more logical. Although the age ranges are somewhat arbitrary, the killing of minors is not as rare as one would prefer to believe. However, outside of these tragic occurrences, there cannot be said to be much of a bias concerning age. There is almost an equal distribution amongst the outstanding three age groups, with a slight inequity for those in their thirties and early forties.

```{r plot4}
plotly::plot_ly(police_killings_per_annum_race, x = ~Year, y = ~Death_Toll, color = ~Race, type = "bar",
        colors = brewer.pal(n = length(unique(police_killings_per_annum_race$Race)), name = "Set3")) %>%
  plotly::layout(
    title = 'Police Killings per Annum by Race',
    xaxis = list(title = 'Year', tickmode = "linear"),
    yaxis = list(title = 'Death Toll'),
    barmode = 'stack',
    bargap = 0.1,
    font = list(color = 'black', family = 'Arial'),
    margin = list(l = 50, r = 50, b = 80, t = 80),
    showlegend = TRUE
  )
```

```{r plot5}
plot_ly(random_sample_without_replacement, x = ~Year, y = ~Death_Toll, color = ~Race, type = "bar") %>%
  layout(
    title = 'Random Sample Without Replacement: Police Killings per Annum by Race',
    xaxis = list(title = 'Year'),
    yaxis = list(title = 'Death Toll'),
    barmode = 'stack',
    bargap = 0.1,
    font = list(color = 'black', family = 'Arial'),
    margin = list(l = 50, r = 50, b = 80, t = 80),
    showlegend = TRUE
  )
```

```{r plot6}
plot_ly(random_sample_with_replacement, x = ~Year, y = ~Death_Toll, color = ~Race, type = "bar",
        colors = brewer.pal(n = length(unique(random_sample_with_replacement$Race)), name = "Set3")) %>%
  layout(
    title = 'Random Sample With Replacement: Police Killings per Annum by Race',
    xaxis = list(title = 'Year'),
    yaxis = list(title = 'Death Toll'),
    barmode = 'stack',
    bargap = 0.1,
    font = list(color = 'black', family = 'Arial'),
    margin = list(l = 50, r = 50, b = 80, t = 80),
    showlegend = TRUE
  )
```

```{r plot7}
plot_ly(stratified_sample, x = ~Year, y = ~Death_Toll, color = ~Race, type = "bar",
        colors = brewer.pal(n = length(unique(stratified_sample$Race)), name = "Set3")) %>%
  layout(
    title = 'Stratified Sample: Police Killings per Annum by Race',
    xaxis = list(title = 'Year'),
    yaxis = list(title = 'Death Toll'),
    barmode = 'stack',
    bargap = 0.1,
    font = list(color = 'black', family = 'Arial'),
    margin = list(l = 50, r = 50, b = 80, t = 80),
    showlegend = TRUE
  )
```

```{r plot8}
plotly::plot_ly(top_10_states, labels = ~State, values = ~Death_Toll, type = 'pie',
                textinfo = 'label+percent', insidetextorientation = 'radial',
                marker = list(colors = rainbow(nrow(top_10_states)))) %>%
  plotly::layout(
    title = 'Top 10 States with Most Police Killings',
    showlegend = TRUE
  )
```

```{r plot9}
plotly::plot_ly(police_killings_armed_status, labels = ~Armed.Status, values = ~Death_Toll, type = 'pie',
                textinfo = 'label+percent', insidetextorientation = 'radial',
                marker = list(colors = RColorBrewer::brewer.pal(n = nrow(police_killings_armed_status), name = "Set3"))) %>%
  plotly::layout(
    title = list(text = 'Police Killings by Armed Status', font = list(size = 18, color = 'black')),
    showlegend = TRUE,
    legend = list(orientation = 'h', x = 0.5, xanchor = 'center', y = -0.1),
    margin = list(b = 100)
  )
```

```{r plot10}
plotly::plot_ly(police_killings_police_charges, labels = ~Criminal.Charges, values = ~Death_Toll, type = 'pie',
                textinfo = 'label+percent', insidetextorientation = 'horizontal',
                marker = list(colors = RColorBrewer::brewer.pal(n = nrow(police_killings_police_charges), name = "Set3"))) %>%
  plotly::layout(
    title = list(text = 'Police Convictions', font = list(size = 18, color = 'black')),
    showlegend = TRUE,
    legend = list(orientation = 'h', x = 0.5, xanchor = 'center', y = -0.1),
    margin = list(t = 120)
  )
```

The above two plots illuminate a rather tragic truth, which is that despite at least 14% of victims being unarmed in incidents such as these, fewer than 3% of perpetrators ultimately face any conviction whatsoever.

```{r shiny_app}
ui <- fluidPage(
  titlePanel("Police Killings against Population Percentages by Race"),
  
  sidebarLayout(
    sidebarPanel(
      selectInput("state_select", "Select State:",
                  choices = unique(percentages_transposed$State),
                  selected = NULL, multiple = FALSE)
    ),
    
    mainPanel(
      # Plot outputs
      plotlyOutput("race_percentages_plot")
    )
  )
)

server <- function(input, output) {
  
  selected_state_data <- reactive({
    state <- input$state_select
    percentages_transposed %>%
      filter(State == state & Race %in% c("Black", "White", "Asian", "Hispanic", "Native_American", "Pacific_Islander", "Unknown")) %>%
      mutate(Source = "% of Deaths") %>%
      bind_rows(racial_stats_transposed %>%
                  filter(State == state & Race %in% c("Black", "White", "Asian", "Hispanic", "Native_American", "Pacific_Islander", "Unknown")) %>%
                  mutate(Source = "% of Population"))
  })
  
  output$race_percentages_plot <- renderPlotly({
    selected_data <- selected_state_data()
    
    plot_ly(selected_data, x = ~Race, y = ~Percentage, color = ~Source, type = 'bar') %>%
      layout(
        title = paste("Death Toll and Population Percentages for", input$state_select),
        xaxis = list(title = 'Race', tickvals = c("Black", "White", "Asian", "Hispanic", "Native_American", "Pacific_Islander", "Unknown")),
        yaxis = list(title = 'Percentage'),
        barmode = 'group',
        showlegend = TRUE,
        legend = list(
          title = "Data Source",
          titlefont = list(color = "black"),
          bgcolor = "#E2E2E2",
          font = list(color = "black"),
          itemsizing = "constant",
          itemclick = "toggleothers"
        ),
        colorway = c("#1f77b4", "#ff7f0e"),
        legendgroup = ~Source
      )
  })
  
}

shinyApp(ui = ui, server = server)

```

<p></p>
One of the more topical and controversial analyses we can perform is that of racial bias. The visual data allows us to read discrete data points regarding racial demographics. Of course, we can attribute the highest death toll to the white population, but this is a weak statement without any presentation as to the racial population distribution. 

This last visual touches upon my previous note, which is that it is imperative that we interpret the death toll of each race group relative to their population size. The visual representation distinguishes this: the green column indicates the percentage of deaths attributable to each racial group, while the purple column shows the percentage of the population they constitute. This analysis must be state-specific due to significant national variance.

Across most states, it remains true that the white population is the victim of the most significant number of killings. However, the black population is, in nearly all instances, the only race group whose percentage of deaths is unfairly disproportionate to the percentage of the population that they constitute. We see their green column surpass their purple in nearly all states, something that is only partially true for the Hispanic community and scarcely, if ever, proved for the white community.

Sadly, this does confirm a racial bias across the US police force, and we must take heed of this.
